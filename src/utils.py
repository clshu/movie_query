import os
import json
import re
import pandas as pd

from src.constants import CHROMA_COLLECTION_NAME, UPDATE_CHROMA_DB


def convert_to_minutes(time_str):
    """
    Convert a time string in the format 'Xh Ym' to total minutes.

    This function takes a string representing a duration in hours and minutes,
    such as '2h 30m' or '1h', and converts it to the total number of minutes.

    Parameters:
    time_str (str): The time string to convert, in the format 'Xh Ym' where
                    X is the number of hours and Y is the number of minutes.

    Returns:
    int: The total number of minutes represented by the input string.
         Returns None if the input string does not match the expected format.
    """
    pattern = r'(\d+)h\s*(\d+)?m?'
    match = re.search(pattern, time_str)
    if match:
        hours = int(match.group(1))
        minutes = int(match.group(2)) if match.group(2) else 0
        total_minutes = (hours * 60) + minutes
        return total_minutes
    else:
        return None


def convert_to_integer(value_str):
    """
    Convert a string representing a number with a suffix (K or M) to an integer.

    This function takes a string in the format '(XK)' or '(YM)', where X is a number
    and Y is a number with optional decimal places, and converts it to the corresponding
    integer value. The suffix 'K' indicates thousands and 'M' indicates millions.

    Parameters:
    value_str (str): The string to convert, in the format '(XK)' or '(YM)'.

    Returns:
    int: The integer value represented by the input string, where 'K' denotes thousands
         and 'M' denotes millions. Returns None if the input string does not match the
         expected format.
    """
    pattern = r'\((\d+(\.\d+)?)?([KM])\)'
    match = re.search(pattern, value_str)

    if match:
        number = float(match.group(1))
        suffix = match.group(3)
        if suffix == 'K':
            return int(number * 1000)
        elif suffix == 'M':
            return int(number * 1000000)
    else:
        return None


def remove_prefix(movie):
    """
   Remove numeric prefixes from a movie title string.

   This function removes any leading numeric prefixes from a movie title string.
   The prefix is expected to be in the format of one or more digits followed by a period and optional spaces.

   Parameters:
   movie (str): The movie title string with a numeric prefix to be removed.

   Returns:
   str: The movie title with the numeric prefix removed.
   """
    return re.sub(r'^\d+\.\s*', '', movie)


def get_vector_store_documents(collection, openai_ef, query):
    """
    Retrieve and sort documents from a vector store based on a query.

    This function takes a query string, generates its embeddings, and queries
    the vector store for the top 5 documents that are most similar to the query.
    The results are then sorted by similarity score in descending order.

    Parameters:
    collection (object): The vector store collection to query.
    openai_ef (function): The function to generate embeddings for the query.
    query (str): The query string to search for in the vector store.

    Returns:
    list: A list of the top 5 documents sorted by their similarity to the query.
    """
    results = collection.query(
        query_embeddings=openai_ef([query]),
        n_results=5
    )
    sorted_list = sorted(
        zip(results['distances'][0], results['documents'][0]), reverse=True)
    sorted_scores, sorted_documents = zip(*sorted_list)
    sorted_documents = list(sorted_documents)
    return sorted_documents


def load_data_into_chroma(openai_ef, chroma_client):
    """
    Load movie data into a Chroma collection.

    This function creates or retrieves a Chroma collection, updates it with data from a CSV file
    if specified, and returns the collection. The data includes embeddings generated by the
    openai_ef function, and is stored in the Chroma collection.

    Parameters:
    openai_ef (function): The function to generate embeddings for the data.
    chroma_client (object): The Chroma client used to manage collections.

    Returns:
    object: The Chroma collection that was created or updated.
    """
    # Create collection
    # chroma_client.delete_collection(CHROMA_COLLECTION_NAME)
    collection = chroma_client.get_or_create_collection(
        name=CHROMA_COLLECTION_NAME)

    current_dir = os.path.dirname(os.path.abspath(__file__))
    fpath = os.path.join(current_dir, "../data/imdb_top_1000.csv")

    if UPDATE_CHROMA_DB:
        print("Updating chroma collection...")
        df = pd.read_csv(fpath).drop("Poster_Link", axis=1)
        df["id"] = df.Series_Title.str.lower() + "_" + \
            df.Released_Year.astype("str")
        df[["Released_Year", "IMDB_Rating", "Meta_score", "No_of_Votes"]] = df[["Released_Year", "IMDB_Rating",
                                                                                "Meta_score", "No_of_Votes"]].astype(str)

        # Convert the DataFrame to a JSON string with each record as a dictionary
        data_list = json.loads(df.to_json(orient="records"))

        # Convert each dictionary in the list to a string representation
        data_list = [str(elem) for elem in data_list]
        movie_ids = df.id.to_list()

        # Add data to the collection
        collection.add(embeddings=openai_ef(data_list),
                       documents=data_list, ids=movie_ids)
        print("Chroma collection updated....")
    else:
        print("Skipping chroma collection update...")
    print("Chroma collection loaded....")
    return collection
